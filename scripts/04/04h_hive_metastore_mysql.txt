# prepare MySQL (instead of Derby) metastore for Hive
# siehe auch Anleitung https://www.geeksforgeeks.org/apache-hive-installation-and-configuring-mysql-metastore-for-hive/
# Das ganze funktioniert für lokale mySQL Datenbank als auch für MySQL im Docker Container lt. Anleitung grp02_install_mysql_docker.txt

# Var a) für mySQL Docker container
#export DOCKER_CONTAINERNAME=swdMysql
#docker cp /usr/local/hive/scripts/metastore/upgrade/mysql ${DOCKER_CONTAINERNAME}:/tmp/
#docker exec -it -u mysql ${DOCKER_CONTAINERNAME} /bin/bash
#export MYSQL_SCHEMA_FILE=/tmp/mysql/hive-schema-4.0.0.mysql.sql

# Var b) lokales MySQL
#export MYSQL_SCHEMA_FILE=/usr/local/hive/scripts/metastore/upgrade/mysql/hive-schema-4.0.0.mysql.sql

mysql -u root -p <<!
   CREATE DATABASE metastore_db;
   USE metastore_db;
   # the following is not necessary, this is anyway created by schematool command, otherwise this would fail with hint, that table exists
   #SOURCE $MYSQL_SCHEMA_FILE;
   show tables;
   CREATE USER 'hive'@'%' IDENTIFIED BY 'hivepassword';
   GRANT ALL ON *.* to 'hive'@'%';
   FLUSH PRIVILEGES;
!

# docker container verlassen

su - hduser
hdfs dfs -chmod 777 /tmp/hive /user/hive/warehouse

cd /usr/local/hive/conf
cp -p hive-site.xml hive-site.xml.derby # Sicherung für die Derby-Variante

# Port has to be set differently to 3306, when using local MySQL instance
  <property>
    <name>javax.jdo.option.ConnectionURL</name> 
    <value>jdbc:mysql://localhost:13306/metastore_db?createDatabaseIfNotExist=true</value>
    <description>
      JDBC connect string for a JDBC metastore.
      To use SSL to encrypt/authenticate the connection, provide database-specific SSL flag in the connection URL.
      For example, jdbc:postgresql://myhost/db?ssl=true for postgres database.
    </description>  
  </property>
  
  <property>  
    <name>javax.jdo.option.ConnectionUserName</name>
    <value>hive</value>
    <description>Username to use against metastore database</description>     
  </property>
  
  <property>
    <name>javax.jdo.option.ConnectionPassword</name>
    <value>hivepassword</value>
    <description>password to use against metastore database</description>
  </property>
  
  <property>
    <name>javax.jdo.option.ConnectionDriverName</name>
    <value>com.mysql.cj.jdbc.Driver</value>
    <description>Driver class name for a JDBC metastore</description>
  </property>
  
# download driver from MySQL, z.B. für 23.04 Ubuntu bzw. besser gleich die Version aus github verwenden
cp ~/BigData/external_libs/mysql-connector-j-8.1.0.jar $HIVE_HOME/lib/
#sudo -s
#cd /tmp
#wget https://downloads.mysql.com/archives/get/p/3/file/mysql-connector-j_8.1.0-1ubuntu23.04_all.deb
#dpkg -i mysql-connector-j_8.1.0-1ubuntu23.04_all.deb
#
#su - hduser
## dann kopiere das entpackte Jar-File nach Hive-Libraries 
#cp /usr/share/java/mysql-connector-j-8.1.0.jar /usr/local/hive/lib/

# WICHTIG: die alte metastore_db (in Derby) zur Seite sichern, man muss danach natürlich alle Tabellen und Tablespaces neu anlegen
mv $HIVE_HOME/conf/metastore_db  $HIVE_HOME/conf/metastore_db.derby
cd $HIVE_HOME/bin && ./schematool -initSchema -dbType mysql -userName hive -passWord hivepassword -verbose

# nachdem alle Changes gemacht wurden, Hive-Server neu starten (dfs und yarn müssen laufen)
hive --service hiveserver2 --hiveconf hive.server2.thrift.port=10000 &
# wenn alles gutgegangen ist, muss folgendes ein "listen" anzeigen
netstat -an | grep 10000
#Andernfalls hive-Server beenden und folgendes machen, damit detailliert geloggt wird, wo das Problem liegt
echo 'export HADOOP_CLIENT_OPTS="-Dhive.root.logger=console"' >$HIVE_HOME/conf/hive-env.sh