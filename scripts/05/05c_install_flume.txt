sudo -s
cd /usr/local
export FLUME_VERSION=1.11.0
wget --no-check-certificate https://archive.apache.org/dist/flume/${FLUME_VERSION}/apache-flume-${FLUME_VERSION}-bin.tar.gz
tar -xzf apache-flume-${FLUME_VERSION}-bin.tar.gz
ln -s apache-flume-${FLUME_VERSION}-bin flume
chown -R hduser:hadoop apache-flume-${FLUME_VERSION}-bin flume

su - hduser

cat >> ~/.bashrc <<!
export FLUME_HOME=/usr/local/flume
export PATH=\$PATH:\$FLUME_HOME/bin
if [ -z "\$CLASSPATH" ]; then
   export CLASSPATH=\$FLUME_HOME/lib/*
else
   export CLASSPATH=\$CLASSPATH:\$FLUME_HOME/lib/*
fi
!

source ~/.bashrc

cd $FLUME_HOME/conf

cp -p flume-env.sh.template flume-env.sh
cp -p flume-conf.properties.template flume-conf.properties

# entweder ans Ende der Datei hängen oder besser im File an der Stelle ersetzen (Prüfen, ob JAVA_HOME stimmt)
cat >>flume-env.sh <<!
export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-$(dpkg --print-architecture)
# Flume Channels könnten Fehler zeigen, dass sie überlaufen, daher Memory-Optionen für Java lieber etwas höher setzen
export JAVA_OPTS="-Xms512m -Xmx1024m -Dcom.sun.management.jmxremote"
export FLUME_CLASSPATH="/usr/local/flume/lib/*"
!

flume-ng version

# bei folgendem Fehler in einem der folgenden Tests passen die Versionen der Guava-Libs nicht zusammen
# java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument
mv $FLUME_HOME/lib/guava-*.jar /tmp
ln -s $HADOOP_HOME/share/hadoop/hdfs/lib/guava-27.0-jre.jar $FLUME_HOME/lib/

# weiter mit Scripts für diverse Flume Tests für SeqGenerator, Netcat-API und ev. Twitter